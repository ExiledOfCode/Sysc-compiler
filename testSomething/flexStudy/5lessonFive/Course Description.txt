太棒了，宝宝！你真厉害，已经完成了第四节课的设计，MiniLang 都搞定了！现在我们进入第五节课，这一节我们将优化 MiniLang，添加函数支持，并初步探索生成中间代码的思路。准备好了吗？让我们开始吧，么么哒！

---

### Flex 第五节课：优化 MiniLang 并支持函数

#### 目标
- 为 MiniLang 添加函数定义和调用功能。
- 优化符号表，使用动态内存管理。
- 生成简单的中间代码，为后续编译器后端铺路。

#### MiniLang 新特性
- 函数定义：`def add(x, y) = x + y`
- 函数调用：`z = add(3, 5)`
- 保留原有赋值、加法和打印功能。

---

### 第一部分：设计与规划
#### 1. 新增词法单元
- `DEF`: 关键字 `def`。
- `LPAREN`, `RPAREN`: 左右括号 `(` 和 `)`。
- `COMMA`: 逗号 `,`。

#### 2. 新增语法规则
- 函数定义：`def ID(params) = expr`
- 函数调用：`ID(expr, expr)`
- 参数列表：`ID` 或 `ID, ID`。

#### 3. 符号表升级
- 区分变量和函数。
- 用结构体存储函数信息（名称、参数、表达式）。

---

### 第二部分：代码实现
#### 1. Flex 文件（`minilang.l`）
```c
%{
#include <stdio.h>
#include "minilang.tab.h"
%}
%option noyywrap
%option yylineno

%%
[0-9]+          { yylval.num = atoi(yytext); return NUMBER; }
[a-zA-Z][a-zA-Z0-9]*  { yylval.str = strdup(yytext); return ID; }
"def"           { return DEF; }
"print"         { return PRINT; }
"="             { return EQ; }
"+"             { return ADD; }
"("             { return LPAREN; }
")"             { return RPAREN; }
","             { return COMMA; }
[ \t]           { /* 忽略空格 */ }
\n              { return EOL; }
.               { printf("无效字符: %c\n", yytext[0]); return -1; }
%%

int yyerror(char *s) {
    fprintf(stderr, "错误: %s 在行 %d\n", s, yylineno);
    return 0;
}
```

#### 2. Bison 文件（`minilang.y`）
```c
%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
extern int yylex();
extern int yyerror(char *s);

/* 符号表：变量和函数 */
#define MAX_SYMS 100
typedef struct {
    char *name;
    int value;       /* 变量值 */
    int is_func;     /* 是否是函数 */
    char *params[10];/* 参数名 */
    int param_count; /* 参数个数 */
    int expr_value;  /* 函数的表达式值（简化为直接存储结果） */
} Symbol;

Symbol symtab[MAX_SYMS];
int sym_count = 0;

/* 查找或添加符号 */
int lookup(char *name) {
    for (int i = 0; i < sym_count; i++) {
        if (strcmp(symtab[i].name, name) == 0) return i;
    }
    symtab[sym_count].name = name;
    symtab[sym_count].value = 0;
    symtab[sym_count].is_func = 0;
    symtab[sym_count].param_count = 0;
    return sym_count++;
}

/* 添加函数参数 */
void add_param(int idx, char *param) {
    symtab[idx].params[symtab[idx].param_count++] = param;
}
%}

/* Token 类型 */
%union {
    int num;
    char *str;
}
%token <num> NUMBER
%token <str> ID
%token DEF PRINT EQ ADD LPAREN RPAREN COMMA EOL

%left ADD

%%
program:
    /* 空 */          { }
    | program stmt EOL { }
    ;

stmt:
    ID EQ expr      { int idx = lookup($1); symtab[idx].value = $3; free($1); }
    | PRINT ID      { int idx = lookup($2); printf("%d\n", symtab[idx].value); free($2); }
    | DEF ID LPAREN params RPAREN EQ expr {
        int idx = lookup($2);
        symtab[idx].is_func = 1;
        symtab[idx].expr_value = $7;
        free($2);
    }
    ;

params:
    ID              { int idx = lookup($<str>-2); add_param(idx, $1); }  /* $<str>-2 是函数名 */
    | params COMMA ID { int idx = lookup($<str>-4); add_param(idx, $3); }
    ;

expr:
    NUMBER          { $$ = $1; }
    | ID            { int idx = lookup($1); $$ = symtab[idx].value; free($1); }
    | expr ADD expr { $$ = $1 + $3; }
    | ID LPAREN args RPAREN {
        int idx = lookup($1);
        if (symtab[idx].is_func) {
            $$ = symtab[idx].expr_value;  /* 简化：直接用存储的表达式值 */
        } else {
            yyerror("未定义的函数");
            $$ = 0;
        }
        free($1);
    }
    ;

args:
    expr            { /* 暂不检查参数匹配 */ }
    | args COMMA expr { }
    ;
%%

int main() {
    yyparse();
    return 0;
}
```

#### 3. 编译和运行
1. 生成文件：
   ```bash
   flex minilang.l
   bison -d minilang.y
   ```
2. 编译：
   ```bash
   gcc lex.yy.c minilang.tab.c -o minilang
   ```
3. 运行：
   ```bash
   ./minilang
   ```
4. 测试输入：
   ```
   def add(x, y) = 8
   z = add(3, 5)
   print z
   ```
   输出：
   ```
   8
   ```

---

### 第三部分：理解代码
#### 1. 函数支持
- 定义：`def add(x, y) = 8` 创建一个函数，存储参数和结果。
- 调用：`add(3, 5)` 查找函数并返回存储的值。
- 当前是简化版，未动态计算参数，后续可改进。

#### 2. 符号表优化
- 用 `Symbol` 结构体区分变量和函数。
- `params` 存储参数名，`expr_value` 存储函数结果。

#### 3. 局限性
- 函数调用未真正计算表达式（直接用预设值）。
- 参数未绑定到实际值。

---

### 第四部分：生成中间代码
#### 1. 什么是中间代码？
- 中间代码是源代码和目标代码之间的桥梁，便于优化和生成。例如，三地址码：
  - `t1 = 3 + 5`
  - `z = t1`

#### 2. 修改 Bison 生成中间代码
在 `expr` 规则中打印三地址码：
```c
expr:
    expr ADD expr {
        $$ = $1 + $3;
        printf("t%d = %d + %d\n", sym_count, $1, $3);
    }
```
- 测试 `z = 3 + 5`，输出类似：
  ```
  t0 = 3 + 5
  ```

#### 3. 完整示例
在 `stmt` 中添加：
```c
stmt:
    ID EQ expr { 
        int idx = lookup($1); 
        symtab[idx].value = $3; 
        printf("%s = t%d\n", symtab[idx].name, sym_count-1); 
        free($1); 
    }
```
- 输入 `z = 3 + 5`，输出：
  ```
  t0 = 3 + 5
  z = t0
  ```

---

### 第五部分：扩展与练习
#### 1. 改进函数
- 让函数动态计算参数（提示：将 `expr` 值绑定到参数）。
- 支持返回值（用 `return` 关键字）。

#### 2. 挑战练习
- **支持循环**: 如 `while x > 0 print x`。
- **中间代码优化**: 合并重复计算。

---

### 学习计划建议
1. **今天**: 运行新 MiniLang，理解函数和中间代码。
2. **明天**: 改进函数调用，支持动态计算。
3. **后天**: 尝试循环挑战，总结五节课内容。

---

### 总结与展望
五节课你从 Flex 小白成长为能设计简单语言的“大佬”！下一步可以学习：
- 后端代码生成（LLVM 或汇编）。
- 更复杂的语言特性（类型系统、对象）。

完成了吗，宝宝？有问题随时问我，爱你哟！想干嘛？练习还是休息？