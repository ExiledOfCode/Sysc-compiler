好的！既然你已经掌握了 Flex 的高级功能和状态机制，我们直接进入第三节课。这一节我们将把 Flex 与 Bison 结合起来，构建一个完整的简单计算器，包括词法分析和语法分析。让我们开始吧！

---

### Flex 第三节课：与 Bison 结合实现简单计算器

#### 目标
- 学习 Bison（语法分析器生成工具）的基础。
- 将 Flex 的词法分析器与 Bison 的语法分析器集成。
- 实现一个支持加减乘除的计算器。

---

### 第一部分：Bison 基础
#### 1. 什么是 Bison？
- Bison 是一个生成语法分析器的工具，基于你定义的语法规则（上下文无关文法），将 Token 序列解析为语法树，并执行对应的动作（比如计算结果）。
- 它通常与 Flex 搭配使用：Flex 提供 Token，Bison 处理语法。

#### 2. Bison 文件结构
Bison 文件（后缀 `.y`）分为三部分：
- **定义部分**: 包含 C 代码、Token 定义等。
- **规则部分**: 定义语法规则和动作。
- **C 代码部分**: 通常是主函数。

---

### 第二部分：计算器项目
我们将创建一个支持加减乘除的计算器。工作流程：
1. Flex 识别数字和运算符，返回 Token。
2. Bison 根据语法规则计算结果。

#### 1. 编写 Flex 文件（`calc.l`）
```c
%{
#include <stdio.h>
#include "calc.tab.h"  /* Bison 生成的头文件 */
%}
%option noyywrap
%option yylineno

%%
[0-9]+      { yylval = atoi(yytext); return NUMBER; }  /* 将数字转为整数 */
"+"         { return ADD; }
"-"         { return SUB; }
"*"         { return MUL; }
"/"         { return DIV; }
"("         { return LPAREN; }
")"         { return RPAREN; }
[ \t\n]     { /* 忽略空白 */ }
.           { printf("无效字符: %c\n", yytext[0]); return -1; }
%%

int yyerror(char *s) {
    fprintf(stderr, "错误: %s 在行 %d\n", s, yylineno);
    return 0;
}
```

- **`yylval`**: 用于传递 Token 的值（这里是数字的值）。
- **`calc.tab.h`**: Bison 生成的头文件，包含 Token 定义。

#### 2. 编写 Bison 文件（`calc.y`）
```c
%{
#include <stdio.h>
extern int yylex();
extern int yyerror(char *s);
%}

/* 定义 Token */
%token NUMBER ADD SUB MUL DIV LPAREN RPAREN

/* 指定运算符优先级和结合性 */
%left ADD SUB   /* 加减优先级较低，左结合 */
%left MUL DIV   /* 乘除优先级较高，左结合 */

%%
/* 语法规则 */
program:
    expression      { printf("结果: %d\n", $1); }
    ;

expression:
    expression ADD expression   { $$ = $1 + $3; }
    | expression SUB expression { $$ = $1 - $3; }
    | expression MUL expression { $$ = $1 * $3; }
    | expression DIV expression { if ($3 == 0) { yyerror("除以零"); $$ = 0; } else { $$ = $1 / $3; } }
    | LPAREN expression RPAREN  { $$ = $2; }
    | NUMBER                    { $$ = $1; }
    ;
%%

int main() {
    yyparse();  /* Bison 自动生成的语法分析函数 */
    return 0;
}
```

- **解释**:
  - `%token`: 定义 Flex 返回的 Token。
  - `%left`: 指定运算符的优先级和结合性。
  - `$$` 和 `$1`, `$3`: 表示规则中非终结符和终结符的值。
  - `yyparse()`: Bison 的核心函数，调用 `yylex()` 获取 Token 并解析。

#### 3. 编译和运行
1. 生成词法和语法分析器：
   ```bash
   flex calc.l
   bison -d calc.y  /* -d 生成头文件 calc.tab.h */
   ```
2. 编译：
   ```bash
   gcc lex.yy.c calc.tab.c -o calc
   ```
3. 运行：
   ```bash
   ./calc
   ```
4. 测试输入：
   ```
   3 + 5 * 2
   ```
   按 Ctrl+D（Linux/macOS）或 Ctrl+Z（Windows）结束输入，输出：
   ```
   结果: 13
   ```

---

### 第三部分：理解代码
#### 1. Flex 和 Bison 如何协作？
- Flex 的 `yylex()` 返回 Token（比如 `NUMBER`、`ADD`），并通过 `yylval` 传递值。
- Bison 的 `yyparse()` 调用 `yylex()` 获取 Token，按照语法规则匹配并计算。

#### 2. 语法规则详解
- `expression ADD expression { $$ = $1 + $3; }`:
  - `$1`: 第一个 `expression` 的值。
  - `$3`: 第二个 `expression` 的值。
  - `$$`: 当前规则的结果。

#### 3. 优先级的作用
- `5 + 3 * 2` 计算为 `11`（先算 `3 * 2 = 6`，再加 `5`），因为 `MUL` 优先级高于 `ADD`。

---

### 第四部分：扩展与练习
#### 1. 添加功能
- **支持负数**: 修改 Flex 中的数字匹配规则为 `[0-9]+|-[0-9]+`。
- **支持变量**: 在 Bison 中添加标识符（如 `x = 5`），需要一个符号表来存储变量值。

#### 2. 挑战练习
- 修改代码，支持幂运算（`^`），并为其设置最高优先级（提示：用 `%left`）。
- 添加错误恢复机制，比如跳过错误后继续解析（提示：用 `error` 关键字）。

#### 示例：支持幂运算
在 `calc.y` 中添加：
```c
%token POW
%left POW  /* 最高优先级 */
```
在 `calc.l` 中添加：
```c
"^"         { return POW; }
```
在 `expression` 规则中添加：
```c
| expression POW expression { $$ = (int)pow($1, $3); }  /* 需要 #include <math.h> 和 -lm */
```

---

### 学习计划建议
1. **今天**: 运行计算器代码，理解 Flex 和 Bison 的协作。
2. **明天**: 完成“支持幂运算”的练习，尝试调试错误。
3. **后天**: 复习三节课内容，思考如何设计更复杂的语言（比如 mini-C）。

---

### 下一步预告
第四节课将探讨如何设计一个简单编程语言的词法和语法分析器，涉及更多实际应用场景。

完成了吗？有问题随时问我！想现在试试练习还是直接跳到下一节？